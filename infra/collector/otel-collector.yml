receivers:
  otlp:
    protocols:
      grpc:
        endpoint: otel-collector:4317
      http:
        endpoint: otel-collector:4318
                
processors:
  # batch metrics before sending to reduce API usage
  batch:
    send_batch_size: 10000
    send_batch_max_size: 11000
    timeout: 10s

exporters:
  prometheus:
    endpoint: "0.0.0.0:8889" #otel-collector:8889
    const_labels:
      label1: spring
  otlp:
    endpoint: tempo:4317  # tempo container host and port
    tls:
      insecure: true

extensions:
  # responsible for responding to health check calls on behalf of the collector.
  health_check:
  # fetches the collector's performance data
  pprof:
  # serves as an http endpoint that provides live debugging data about instrumented components.
  zpages:

service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    # for now we only interested about metrics...
    metrics:
      receivers: [otlp]
      processors: [batch]
      exporters: [prometheus]
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp]  # name here should match the exporter name for tempo which is otlp
#    logs:
#      receivers: [otlp]
#      exporters: [loki]